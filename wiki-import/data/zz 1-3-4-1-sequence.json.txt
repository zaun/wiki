{
    "title": "Sequence",
    "parentTitle": "Data Structures",
    "aliases": [
        "List",
        "Indexed Collection"
    ],
    "links": [
        {
            "title": "Encyclopedia of Mathematics – Sequence",
            "url": "https://encyclopediaofmath.org/wiki/Sequence"
        },
        {
            "title": "Britannica – Sequence (Mathematics)",
            "url": "https://www.britannica.com/science/sequence-mathematics"
        },
        {
            "title": "Wiley – Data Structures & Algorithms in Java (Goodrich, Tamassia & Goldwasser) – Chapter on Lists and Sequences",
            "url": "https://www.wiley.com/en-us/Data+Structures+and+Algorithms+in+Java%2C+6th+Edition-p-9781118771334"
        },
        {
            "title": "MIT OpenCourseWare – Data Structures (6.006) Lecture on Arrays vs. Linked Lists",
            "url": "https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-spring-2020/pages/lecture-notes/"
        },
        {
            "title": "ACM DL – The Art of Computer Programming, Volume 1: Fundamental Algorithms (Knuth) – Section on Dynamic Arrays",
            "url": "https://www-cs-faculty.stanford.edu/~knuth/taocp.html"
        },
        {
            "title": "Springer – Purely Functional Data Structures (Okasaki)",
            "url": "https://link.springer.com/book/10.1007/3-540-44645-0"
        }
    ],
    "tags": [],
    "details": [],
    "content": "A Sequence ADT represents an ordered collection of elements accessible by position. It abstracts the notion of a finite or (in some contexts) infinite list, providing operations for random access, insertion, deletion, and traversal, without prescribing how elements are laid out in memory or represented internally.",
    "sections": [
        {
            "title": "ADT Contract and Core Operations",
            "content": "A Sequence supports:\n\n- **access(i)**: retrieve the element at index i (0 ≤ i < size).\n- **update(i, x)**: replace element at index i with x.\n- **insert(i, x)**: insert x at position i, shifting later elements.\n- **remove(i)**: delete the element at index i, shifting later elements.\n- **append(x)**/**prepend(x)**: insert at end or front.\n- **size()**: return the number of elements.\n- **subsequence(i, j)**: extract the contiguous slice from i to j–1.\n\nPreconditions and postconditions specify valid index ranges and effect on size."
        },
        {
            "title": "Formal Semantics",
            "content": "Mathematically, a finite sequence of type T is a function f: {0,1,…,n–1} → T. Operations correspond to transformations on this function: insertion extends its domain by shifting indices ≥ i, removal restricts the domain, and update composes f with a pointwise change at i. Infinite sequences extend the domain to ℕ."
        },
        {
            "title": "Array-Based Implementations",
            "content": "Static arrays provide O(1) access and update but O(n) insertion/deletion due to shifting. **Dynamic arrays** (e.g., amortized doubling) achieve O(1) amortized append while retaining O(1) access, at the cost of occasional O(n) resizing."
        },
        {
            "title": "Pointer-Based Implementations",
            "content": "**Singly** and **doubly linked lists** support O(1) insertion/deletion at known nodes and O(1) prepend, but incur O(n) access by index and extra memory per node. **Sentinel nodes** and **cursor lists** optimize boundary cases and memory locality."
        },
        {
            "title": "Complexity Trade‑Offs",
            "content": "Choice of implementation reflects workload:\n\n- **Random access–heavy**: dynamic arrays preferred.\n- **Frequent mid‑sequence insertion/deletion**: linked lists or balanced trees (e.g., rope) excel.\n- **Immutable/persistent sequences**: functional deques or finger trees provide amortized O(1) access to ends and O(log n) for updates."
        },
        {
            "title": "Advanced Sequence Structures",
            "content": "**Ropes** (balanced trees of strings) and **gap buffers** optimize large‑text editing. **Finger trees** support a wide suite of sequence operations in O(1) or O(log n). **Zippers** provide efficient localized updates by dividing a sequence into focus and context."
        },
        {
            "title": "Applications and Practical Considerations",
            "content": "Sequences appear as building blocks in arrays, strings, and lists across programming languages. They underpin text editors, event logs, time‑series databases, and version control histories. Memory layout, cache locality, and concurrency control influence the choice among array‑based, linked, or tree‑based variants."
        }
    ]
}