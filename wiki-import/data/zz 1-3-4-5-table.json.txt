{
    "title": "Table",
    "parentTitle": "Data Structures",
    "aliases": [
        "Relation",
        "2D Map",
        "Data Frame"
    ],
    "links": [
        {
            "title": "E. F. Codd – A Relational Model of Data for Large Shared Data Banks",
            "url": "https://ocw.mit.edu/courses/6-830-database-systems-fall-2010/pages/readings/lec2/"
        },
        {
            "title": "MIT OpenCourseWare – Lecture 2: The Relational Model",
            "url": "https://ocw.mit.edu/courses/6-830-database-systems-fall-2010/pages/readings/lec2/"
        },
        {
            "title": "Britannica – Relational Database",
            "url": "https://www.britannica.com/technology/relational-database"
        },
        {
            "title": "Britannica – Database",
            "url": "https://www.britannica.com/technology/database"
        },
        {
            "title": "Wikipedia – Relational Table",
            "url": "https://en.wikipedia.org/wiki/Relational_table"
        },
        {
            "title": "Encyclopedia of Mathematics – Matrix",
            "url": "https://encyclopediaofmath.org/wiki/Matrix"
        }
    ],
    "tags": [],
    "details": [],
    "content": "A Table ADT generalizes the notion of a two‑dimensional mapping from row and column keys to values. It abstracts both spreadsheet‑style grids and database relations, defining operations for cell access, row/column manipulation, and relational transforms without prescribing any particular storage layout. By capturing projection, selection, and join as primitive operations, the Table ADT serves as a bridge between low‑level data structures and high‑level query languages.",
    "sections": [
        {
            "title": "Concept and Use Cases",
            "content": "Tables model any structure where data is organized by two orthogonal indices—rows and columns. They appear as spreadsheets, in‑memory data frames, pivot tables, and as the core unit of the relational model in databases. Use cases include analytical reporting, scientific data grids, and key‑value meshes."
        },
        {
            "title": "ADT Interface and Laws",
            "content": "Key operations:\n\n- **get(r, c)**: retrieve the value at row r, column c (or null if undefined).\n- **set(r, c, v)**: assign v to the cell at (r, c).\n- **insertRow(r, rowData)** / **insertColumn(c, colData)**: add a new row or column.\n- **deleteRow(r)** / **deleteColumn(c)**: remove a row or column.\n- **project(cols)**: return a new table with only the specified columns.\n- **select(predicate)**: filter rows by a Boolean predicate on row tuples.\n- **join(otherTable, onCols)**: merge two tables matching on shared columns.\n\nThese satisfy laws such as idempotence of multiple projects and associativity of relational join."
        },
        {
            "title": "Formal Semantics",
            "content": "Mathematically, a table is a partial function T: R × C ⇀ V, where R and C are sets of row and column keys, and V the value domain. Projection corresponds to function restriction on C; selection filters the domain subset of R × C for which predicates on row‑valued functions hold; join constructs the union of two functions on aligned domains."
        },
        {
            "title": "Storage Schemes",
            "content": "Concrete implementations vary:\n\n- **Dense 2D Array**: contiguous memory, O(1) cell access, poor for sparse tables.\n- **Map‑of‑Maps**: hash or tree from r → (map from c → v), efficient for sparse and dynamic tables.\n- **Columnar Layout**: stores each column contiguously, optimized for projection and vectorized operations.\n- **Row‑oriented Blocks**: blocks of complete rows, balancing row and column access costs."
        },
        {
            "title": "Relational Primitives and Extensions",
            "content": "Beyond basic CRUD, tables support:\n\n- **Aggregation**: grouping rows by keys and computing summaries (sum, count).\n- **Sorting**: ordering rows by one or more columns.\n- **Indexing**: auxiliary structures (B‑trees, hash indexes) mapping key subsets to row positions for fast lookup.\n- **Views**: virtual tables defined by queries over base tables, enabling schema abstraction."
        },
        {
            "title": "Performance and Trade‑Offs",
            "content": "Choice of layout impacts performance:\n\n- **Row‑major** excels at whole‑row operations (e.g., inserts, updates).\n- **Column‑major** excels at column scans and vectorized computations.\n- **Sparse maps** minimize memory for tables with few non‑null cells but incur pointer overhead.\n- **Indexed tables** support O(log n) or O(1) row retrieval by key but require update overhead on writes."
        },
        {
            "title": "Applications and Theoretical Perspective",
            "content": "Table ADTs underpin relational databases (SQL tables), in‑memory analytics (data frames), and spreadsheet software. Theoretically, they embody the relational algebra and calculus, serving as abstract models for query optimization, normalization, and schema design. Philosophically, tables highlight the tension between declarative specification and physical data layout, illustrating abstraction as a core principle of data modeling."
        }
    ]
}