1. Fundamentals & Analysis  
   1.1 Algorithm Analysis & Complexity  
       1.1.1 Asymptotic Notation (O, Ω, Θ, o)  
       1.1.2 Amortized Analysis  
       1.1.3 Complexity Classes (P, NP, NP‑complete, NP‑hard)  
       1.1.4 Reductions & Hardness  
       1.1.5 Approximation Hardness  
   1.2 Algorithmic Paradigms  
       1.2.1 Divide & Conquer  
           1.2.1.1 Master Theorem  
           1.2.1.2 Karatsuba Multiplication  
           1.2.1.3 Strassen’s Matrix Multiply  
           1.2.1.4 Quickselect & QuickSort  
       1.2.2 Dynamic Programming  
           1.2.2.1 Memoization vs. Tabulation  
           1.2.2.2 Knapsack (0/1, Unbounded)  
           1.2.2.3 Longest Common Subsequence / Substring  
           1.2.2.4 Matrix Chain Multiplication  
           1.2.2.5 Optimal Binary Search Tree  
       1.2.3 Greedy Algorithms  
           1.2.3.1 Interval Scheduling  
           1.2.3.2 Huffman Coding  
           1.2.3.3 Fractional Knapsack  
           1.2.3.4 Dijkstra’s Algorithm  
       1.2.4 Backtracking  
           1.2.4.1 N‑Queens  
           1.2.4.2 Hamiltonian Path / Graph Coloring  
           1.2.4.3 Sudoku Solver  
       1.2.5 Branch & Bound  
           1.2.5.1 Traveling Salesman (Held–Karp)  
           1.2.5.2 Integer Programming  
       1.2.6 Randomized Algorithms  
           1.2.6.1 QuickSort (random pivot)  
           1.2.6.2 Las Vegas vs. Monte Carlo  
           1.2.6.3 Randomized Select  
       1.2.7 Parallel & Distributed Algorithms  
           1.2.7.1 MapReduce  
           1.2.7.2 Bulk Synchronous Parallel (BSP)  
           1.2.7.3 PRAM Models (EREW, CREW, CRCW)  
           1.2.7.4 Consensus & Fault‑Tolerant Distributed Algorithms  
               1.2.7.4.1 Leader election (Bully, Chang–Roberts)  
               1.2.7.4.2 Paxos, Raft  
               1.2.7.4.3 Lamport timestamps, Vector clocks  
               1.2.7.4.4 Practical Byzantine Fault Tolerance (PBFT)  
       1.2.8 Online Algorithms  
           1.2.8.1 Ski Rental  
           1.2.8.2 Paging / Caching (LRU, FIFO)  
           1.2.8.3 Competitive Ratio Analysis  

2. Core Methodologies  
   2.1 Sorting & Selection  
       2.1.1 Elementary Sorts  
           2.1.1.1 Bubble Sort  
           2.1.1.2 Insertion Sort  
           2.1.1.3 Selection Sort  
       2.1.2 Efficient Comparison Sorts  
           2.1.2.1 Merge Sort  
               2.1.2.1.1 Top‑Down vs. Bottom‑Up  
               2.1.2.1.2 Parallel Merge Sort  
           2.1.2.2 Quick Sort  
               2.1.2.2.1 Lomuto vs. Hoare Partition  
               2.1.2.2.2 Randomized & 3‑Way QuickSort  
           2.1.2.3 Heap Sort  
           2.1.2.4 Introsort (std::sort)  
       2.1.3 Non‑Comparison Sorts  
           2.1.3.1 Counting Sort  
           2.1.3.2 Radix Sort  
           2.1.3.3 Bucket Sort  
       2.1.4 Selection  
           2.1.4.1 Quickselect  
           2.1.4.2 Median of Medians  
   2.2 Searching  
       2.2.1 Unstructured Search  
           2.2.1.1 Linear Search  
           2.2.1.2 Sentinel Search  
       2.2.2 Structured Search  
           2.2.2.1 Binary Search  
               2.2.2.1.1 Lower/Upper Bound  
               2.2.2.1.2 Exponential Search  
           2.2.2.2 Interpolation Search  
           2.2.2.3 Fibonacci Search  
       2.2.3 Finger Search & Jump Search  
   2.3 Graph & Network Algorithms  
       2.3.1 Traversal  
           2.3.1.1 Breadth‑First Search (BFS)  
           2.3.1.2 Depth‑First Search (DFS)  
           2.3.1.3 Bidirectional Search  
       2.3.2 Shortest Path  
           2.3.2.1 Dijkstra’s Algorithm  
           2.3.2.2 Bellman‑Ford  
           2.3.2.3 A* Search  
               2.3.2.3.1 Heuristic Functions  
           2.3.2.4 Floyd‑Warshall  
           2.3.2.5 Johnson’s Algorithm  
       2.3.3 Minimum Spanning Tree  
           2.3.3.1 Kruskal’s Algorithm  
           2.3.3.2 Prim’s Algorithm  
           2.3.3.3 Borůvka’s Algorithm  
       2.3.4 Network Flow  
           2.3.4.1 Ford‑Fulkerson / Edmonds‑Karp  
           2.3.4.2 Dinic’s Algorithm  
           2.3.4.3 Push‑Relabel  
           2.3.4.4 Circulation with Demands  
       2.3.5 Matching & Covering  
           2.3.5.1 Bipartite Matching (Hopcroft–Karp)  
           2.3.5.2 General Matching (Edmonds’ blossom)  
           2.3.5.3 Vertex/Edge Cover & Independent Set Approximations  
   2.4 String & Text Algorithms  
       2.4.1 Exact Matching  
           2.4.1.1 Knuth‑Morris‑Pratt (KMP)  
           2.4.1.2 Boyer‑Moore & Horspool  
           2.4.1.3 Rabin‑Karp  
       2.4.2 Suffix Structures  
           2.4.2.1 Suffix Tree Construction (Ukkonen)  
           2.4.2.2 Suffix Array & Kasai’s LCP  
           2.4.2.3 Generalized Suffix Automaton  
       2.4.3 Approximate Matching  
           2.4.3.1 Edit Distance (Levenshtein)  
           2.4.3.2 Bit‑parallel Algorithms (Myers)  
           2.4.3.3 Landau–Vishkin  
   2.5 Computational Geometry  
       2.5.1 Convex Hull  
           2.5.1.1 Graham Scan  
           2.5.1.2 Andrew’s Monotone Chain  
           2.5.1.3 Quickhull  
       2.5.2 Triangulation  
           2.5.2.1 Delaunay Triangulation (Bowyer–Watson)  
           2.5.2.2 Ear Clipping  
       2.5.3 Proximity & Range  
           2.5.3.1 kd‑Tree Range Search  
           2.5.3.2 Range Tree Query  
           2.5.3.3 Nearest Neighbor Search (Ball Tree, VP‑Tree)  
       2.5.4 Line & Segment  
           2.5.4.1 Bentley‑Ottmann Intersection  
           2.5.4.2 Point‑Location Structures  
       2.5.5 Topology & Extensions  
           2.5.5.1 Strongly Connected Components (Kosaraju, Tarjan)  
           2.5.5.2 Planarity Testing (Hopcroft–Tarjan)  
           2.5.5.3 Persistent Homology Basics  
   2.6 Numerical & Algebraic Algorithms  
       2.6.1 Arithmetic & Number Theory  
           2.6.1.1 Euclidean GCD / Extended GCD  
           2.6.1.2 Modular Exponentiation  
           2.6.1.3 Primality Testing (Miller‑Rabin, AKS)  
           2.6.1.4 Integer Factorization (Pollard’s Rho)  
       2.6.2 Linear Algebra  
           2.6.2.1 Gaussian Elimination  
           2.6.2.2 Strassen & Coppersmith‑Winograd  
           2.6.2.3 QR / SVD Decomposition  
       2.6.3 Transforms  
           2.6.3.1 Fast Fourier Transform (FFT)  
           2.6.3.2 Number Theoretic Transform (NTT)  
       2.6.4 Root‑Finding & Integration  
           2.6.4.1 Root Solvers (Bisection, Newton‑Raphson, Secant)  
           2.6.4.2 Numerical Integration (Trapezoidal, Simpson, Gaussian Quadrature)  
           2.6.4.3 ODE Solvers (Euler, Runge‑Kutta)  
   2.7 Optimization & Approximation  
       2.7.1 Exact Optimization  
           2.7.1.1 Simplex Method (LP)  
           2.7.1.2 Branch & Cut (IP)  
       2.7.2 Approximation Schemes  
           2.7.2.1 PTAS / FPTAS  
           2.7.2.2 Greedy Approximation  
       2.7.3 Metaheuristics  
           2.7.3.1 Simulated Annealing  
           2.7.3.2 Genetic Algorithms  
           2.7.3.3 Particle Swarm Optimization  
   2.8 Cryptographic Algorithms  
       2.8.1 Symmetric Encryption  
           2.8.1.1 Block Ciphers (AES, DES, 3DES)  
           2.8.1.2 Stream Ciphers (RC4, ChaCha20)  
           2.8.1.3 Modes of Operation (CBC, GCM, CTR)  
       2.8.2 Asymmetric Encryption  
           2.8.2.1 RSA  
           2.8.2.2 Elliptic‑Curve Cryptography (ECC)  
       2.8.3 Hash Functions & MAC  
           2.8.3.1 SHA Family, MD5, BLAKE2  
           2.8.3.2 HMAC / CMAC  
       2.8.4 Digital Signatures & Key Exchange  
           2.8.4.1 DSA / ECDSA  
           2.8.4.2 Diffie‑Hellman / ECDH  
   2.9 Data Compression  
       2.9.1 Entropy Coding  
           2.9.1.1 Huffman Coding  
           2.9.1.2 Arithmetic Coding  
       2.9.2 Dictionary Methods  
           2.9.2.1 LZ77 / LZ78 / LZW  
           2.9.2.2 LZ4 / LZO / Zstd  
       2.9.3 Transform‑Based  
           2.9.3.1 Burrows–Wheeler Transform (BWT)  
           2.9.3.2 Move‑to‑Front  

3. Streaming & Scheduling  
   3.1 Streaming & Sketching  
       3.1.1 Sampling  
           3.1.1.1 Reservoir Sampling  
           3.1.1.2 Weighted Sampling  
       3.1.2 Sketches  
           3.1.2.1 Count–Min Sketch  
           3.1.2.2 HyperLogLog  
           3.1.2.3 Quantile Sketches (GK, t‑digest)  
       3.1.3 Frequent‑Items  
           3.1.3.1 Lossy Counting  
           3.1.3.2 Space‑Saving  
   3.2 Scheduling & Resource Allocation  
       3.2.1 Scheduling Policies  
           3.2.1.1 Round‑Robin  
           3.2.1.2 Priority Scheduling  
           3.2.1.3 Fair‑Share Scheduling  
       3.2.2 Load Balancing  
           3.2.2.1 Work‑Stealing Algorithms  
           3.2.2.2 Weighted Least-Connection  

4. Specialized & Modern Domains  
   4.1 Machine Learning & Data Mining Algorithms  
       4.1.1 Supervised Learning (k‑NN, Decision Trees, SVM)  
       4.1.2 Unsupervised Learning (k‑Means, DBSCAN, Hierarchical Clustering)  
       4.1.3 Dimensionality Reduction (PCA, t‑SNE)  
       4.1.4 Ensemble Methods (Random Forests, Boosting)  
   4.2 Property Testing & Sublinear‑Time Algorithms  
       4.2.1 Graph Property Testing (Connectivity, Bipartiteness)  
       4.2.2 Distribution Testing (Uniformity, Identity)  
       4.2.3 Local Algorithms for Massive Data  
   4.3 Algorithmic Game Theory & Mechanism Design  
       4.3.1 Auction Algorithms (Vickrey, Myerson)  
       4.3.2 Price of Anarchy / Price of Stability  
       4.3.3 Equilibrium Computation (Nash, Correlated)  
   4.4 Bioinformatics & Text‑Mining Algorithms  
       4.4.1 Sequence Alignment (Needleman–Wunsch, Smith–Waterman)  
       4.4.2 BLAST Heuristics  
       4.4.3 TF‑IDF and PageRank (Web‑Scale Graph Mining)  
