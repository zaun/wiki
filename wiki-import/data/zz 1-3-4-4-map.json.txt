{
    "title": "Map",
    "parentTitle": "Data Structures",
    "aliases": [
        "Dictionary",
        "Associative Array"
    ],
    "links": [
        {
            "title": "Oracle – Java SE Map Interface",
            "url": "https://docs.oracle.com/javase/8/docs/api/java/util/Map.html"
        },
        {
            "title": "Python Documentation – Built‑in Types: dict",
            "url": "https://docs.python.org/3/library/stdtypes.html#dict"
        },
        {
            "title": "C++ Reference – std::map",
            "url": "https://en.cppreference.com/w/cpp/container/map"
        },
        {
            "title": "Britannica – Dictionary (Data Structure)",
            "url": "https://www.britannica.com/technology/dictionary-data-structure"
        },
        {
            "title": "MIT OpenCourseWare – Data Structures (6.006) Lecture on Hash Tables & Balanced Trees",
            "url": "https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-spring-2020/pages/lecture-notes/"
        },
        {
            "title": "Wiley – Data Structures & Algorithms in Java (Goodrich, Tamassia & Goldwasser) – Chapter on Maps",
            "url": "https://www.wiley.com/en-us/Data+Structures+and+Algorithms+in+Java%2C+6th+Edition-p-9781118771334"
        }
    ],
    "tags": [],
    "details": [],
    "content": "A Map ADT (also called a dictionary or associative array) represents a finite collection of key–value pairs with unique keys. It abstracts the concept of a partial function from keys to values, specifying operations for insertion, lookup, deletion, and traversal without prescribing any particular internal structure. By defining the interface and algebraic laws, the Map ADT enables interchangeable implementations that satisfy the same behavioral contract.",
    "sections": [
        {
            "title": "Interface and Behavioral Contract",
            "content": "Core operations:\n\n- **put(k, v)**: associate key k with value v, replacing any existing mapping.\n- **get(k)**: retrieve the value associated with k, or return null/None if absent.\n- **remove(k)**: delete the mapping for k.\n- **containsKey(k)**: test whether k is in the map.\n- **size()**, **isEmpty()**: query the number of entries.\n- **keys()**, **values()**, **entries()**: return iterators over keys, values, or key–value pairs.\n\nAxiomatic laws include: put followed by get returns the inserted value; remove clears a mapping; get on a key not present yields a designated “not found” result."
        },
        {
            "title": "Formal Semantics",
            "content": "Mathematically, a map M is a finite partial function M: K ⇀ V, where K is the key domain and V the value codomain. The domain of M is the set of keys with defined values. Operations correspond to function updates (M[k ↦ v]), deletion (M ⧵ {k}), and lookup (M(k) defined iff k ∈ dom(M)). Composition of maps and restriction to subdomains follow standard function operations."
        },
        {
            "title": "Hash‑Based Implementations",
            "content": "Hash tables use a hash function h(k) to distribute keys into buckets. With resizing strategies (e.g., dynamic array doubling), they achieve **O(1)** average‑case time for put, get, and remove, with worst‑case **O(n)** under high collision scenarios. Collision resolution techniques include chaining, open addressing (linear/quadratic probing), and Cuckoo hashing."
        },
        {
            "title": "Tree‑Based Implementations",
            "content": "Balanced search trees (e.g., red‑black trees, AVL trees) store entries in sorted order by key, supporting put, get, and remove in **O(log n)** worst‑case time. They enable ordered traversal and range queries. Variants like skip lists and B‑trees provide alternative trade‑offs for concurrency, disk‑based storage, or parallelism."
        },
        {
            "title": "Persistent and Functional Maps",
            "content": "Immutable map implementations (e.g., hash‑array mapped tries, HAMTs) support persistence: updates yield new maps sharing structure with previous versions. Operations remain **O(log n)** or **O(1)** amortized, depending on branching factors. These are central in functional programming languages (Clojure, Scala) and proof assistants for safe incremental updates."
        },
        {
            "title": "Applications and Performance Considerations",
            "content": "Map ADTs underpin symbol tables in compilers, caching systems, in‑memory databases, and configuration stores. Choice of implementation depends on workload: hash maps for high throughput; tree maps for ordered keys and range operations; persistent maps for safe concurrency and undo functionality."
        }
    ]
}